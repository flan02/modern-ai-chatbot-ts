/* eslint-disable @typescript-eslint/no-unused-vars */

import { streamToString } from "@/lib/utils";
import { handlerChatbotResponse, handlerUserMessage, sendRagChatMessage } from "@/server-functions";
import { aiUseChatAdapter } from "@upstash/rag-chat/nextjs";
import { NextRequest, NextResponse } from "next/server";

type ChatStreamBody = {
  messages: { content: string }[],
  sessionId: string
}

export const POST = async (req: NextRequest, res: NextResponse) => {

  try {
    const { messages, sessionId } = await req.json() as ChatStreamBody

    const lastMessage = messages[messages.length - 1].content // I'm assuming the last message is the one that the user wants to send
    //const response = await ragChat.chat(lastMessage, { streaming: true, sessionId })
    //console.log("response", response)
    await handlerUserMessage(lastMessage, sessionId, "user")

    const response = await sendRagChatMessage(lastMessage, sessionId)

    // ? Cloning flow
    const [streamDB, streamAdapter] = response.output.tee() // What does this do? ... It splits the stream into two streams

    // ? Convert the first stream to a string and add to ddbb
    const dataString = await streamToString(streamDB)
    await handlerChatbotResponse(dataString, sessionId, "assistant")

    return aiUseChatAdapter({ output: streamAdapter, isStream: true }) // The message is generated by the AI
    // ? Add second stream to the response
    //return NextResponse.json(aiUseChatAdapter({ output: streamAdapter, isStream: true })) // The message is generated by the AI
  } catch (error) {
    console.error(error as unknown)
    return NextResponse.json({ error: error }, { status: 500 })
  }
}